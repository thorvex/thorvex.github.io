(()=>{"use strict";class e{static async fileToDataURL(e){return await new Promise((t=>{const a=new FileReader;a.addEventListener("load",(e=>{t(e.target.result)})),a.readAsDataURL(e)}))}static async pickDir(){return await window.showDirectoryPicker()}static async readDirRecursive(t,a,r="."){for await(const s of t.values())await a(s,`${r}/${s.name}`),"directory"===s.kind&&await e.readDirRecursive(s,a,`${r}/${s.name}`)}static async openFile(e,t){return await e.getFileHandle(t,{create:!0})}static async tryOpenPath(e,t){try{const a=t.split("/");let r=e;for(const e of a.slice(1,a.length-1))r=await r.getDirectoryHandle(e);return await r.getFileHandle(a.at(-1))}catch(e){return null}}static async readFileEx(e,t){const a=await e.getFile();return await a[t]()}static async readFileAsArrayBuffer(t){try{return await e.readFileEx(t,"arrayBuffer")}catch(e){return new ArrayBuffer(0)}}static async readFileAsUint8Array(t){return new Uint8Array(await e.readFileAsArrayBuffer(t))}static async readFileAsText(t){try{return await e.readFileEx(t,"text")}catch(e){return""}}static async readFileAsJson(t){try{return await e.readFileEx(t,"json")}catch(e){return{}}}static async writeFile(e,t){const a=await e.createWritable();await a.write(t),await a.close()}}class t{static async compress(e){const t=new ReadableStream({start(t){t.enqueue(e),t.close()}}),a=new CompressionStream("deflate"),r=[],s=t.pipeThrough(a).getReader();let i;for(;!(i=await s.read()).done;)r.push(i.value);return new Uint8Array(await new Blob(r).arrayBuffer())}static async decompress(e){const t=new ReadableStream({start(t){t.enqueue(e),t.close()}}),a=new DecompressionStream("deflate"),r=[],s=t.pipeThrough(a).getReader();let i;for(;!(i=await s.read()).done;)r.push(i.value);return new Uint8Array(await new Blob(r).arrayBuffer())}}class a{static get DefaultHash(){return 0}}class r{constructor(e,t){this.handle=e,this.storageType=t}async readHashes(){let r;try{const a=await e.readFileAsUint8Array(this.handle),s=await t.decompress(a),i=new TextDecoder("utf-8").decode(s);if(r=JSON.parse(i),1!==r.storageVersion)return{}}catch(e){return{}}if(this.storageType===a.DefaultHash)for(const e in r){const t=r[e];r[e]={hash:new Uint8Array(t.hash),lastModified:t.lastModified}}return r}async writeHashes(r){if(this.storageType===a.DefaultHash){const e={};for(const t in r){const a=r[t];e[t]={hash:Array.from(a.hash),lastModified:a.lastModified}}r=e}r.storageVersion=1;const s=JSON.stringify(r),i=new TextEncoder("utf-8").encode(s),n=await t.compress(i);await e.writeFile(this.handle,n)}}class s{static async open(){return new s(await e.pickDir())}constructor(e){this.handle=e}async openFile(t,a){return new r(await e.openFile(this.handle,t),a)}}class i{constructor(e,t){this.point=e,this.dimension=t,this.left=null,this.right=null}}class n{constructor(e){if(!e?.length)throw new Error("Points array is required");this.k=e[0].length,this.root=this.build(e,0)}build(e,t){if(0===e.length)return null;const a=t%this.k;e.sort(((e,t)=>e[a]-t[a]));const r=Math.floor(e.length/2),s=new i(e[r],a);return s.left=this.build(e.slice(0,r),t+1),s.right=this.build(e.slice(r+1),t+1),s}static distanceSquared(e,t){return e.reduce(((e,a,r)=>{const s=a-t[r];return e+s*s}),0)}nearest(e){let t=null,a=1/0;const r=(s,i)=>{if(!s)return;const c=n.distanceSquared(s.point,e);c<a&&(t=s,a=c);const o=s.dimension,l=e[o]-s.point[o],[d,h]=l<0?[s.left,s.right]:[s.right,s.left];r(d,i+1),l*l<a&&r(h,i+1)};return r(this.root,0),{node:t,distance:a}}kNearest(e,t){const a=[];return function r(s,i){if(!s)return;!function(e,r){a.push({node:e,distance:r}),a.sort(((e,t)=>t.distance-e.distance)),a.length>t&&a.shift()}(s,n.distanceSquared(s.point,e));const c=s.dimension,o=e[c]-s.point[c];let l=o<0?s.left:s.right,d=o<0?s.right:s.left;r(l,i+1),o*o<(a.length<t?1/0:a[0].distance)&&r(d,i+1)}(this.root,0),a.sort(((e,t)=>e.distance-t.distance))}static distanceToSimilarity(e,t){if(t<=0)return 0;const a=255*t*255,r=Math.min(e,a),s=1-Math.sqrt(r)/Math.sqrt(a);return Math.max(0,s)}}class c{static async#e(e,t,a,r){return await new Promise(((s,i)=>{const n=new Image;n.addEventListener("load",(()=>{const e=document.createElement("canvas"),i=e.getContext("2d");e.width=t,e.height=a,i.drawImage(n,0,0,e.width,e.height);const c=i.getImageData(0,0,e.width,e.height).data;s(r(c))})),n.addEventListener("error",(()=>{i()})),n.src=e}))}static async hash(t){const a=await e.fileToDataURL(t);return await c.#e(a,16,16,(e=>{const t=new Uint8Array(e.length/4);for(let a=0,r=0;a<e.length;a+=4){const s=e[a],i=e[a+1],n=e[a+2],c=Math.floor(.299*s+.587*i+.114*n);t[r++]=c}return t}))}}function o(e){return Array.from(e).map((e=>e.toString(16).padStart(2,"0"))).join("")}const l={storageDir:null,hashRecords:{},hashRecordsByHash:{},hashRecordsTree:null};async function d(t){for(;results.children.length>0;){const e=results.children[0];for(const t of e.querySelectorAll("img"))URL.revokeObjectURL(t.src);e.remove()}image.src.endsWith("/#")||URL.revokeObjectURL(image.src),image.src=URL.createObjectURL(t);const a=await c.hash(t),r=l.hashRecordsTree.kNearest(a,100),s=[];for(const e of r){const t=o(e.node.point),a=l.hashRecordsByHash[t];for(const t of a)s.push({path:t.path,similarity:n.distanceToSimilarity(e.distance,e.node.point.length)})}for(const t of s){const a=document.createElement("tr"),r=document.createElement("img"),s=await e.tryOpenPath(l.storageDir.handle,t.path),i=await s.getFile();r.addEventListener("click",(()=>{fetch(r.src).then((e=>e.blob())).then((e=>{imgPicker.value="",d(e)}))})),r.addEventListener("contextmenu",(e=>{e.preventDefault(),window.open(r.src,"_blank")})),await new Promise((async e=>{r.src=URL.createObjectURL(i);const t=setTimeout(e,5e3);r.addEventListener("load",(()=>{clearTimeout(t),e()}))}));const n=document.createElement("td");n.innerHTML=`size: ${r.width}x${r.height}<br>similarity: ${t.similarity}<br>path: ${t.path}<br>`,n.appendChild(r),a.appendChild(n),results.appendChild(a)}}dirPicker.addEventListener("click",(async()=>{let t;try{t=await s.open()}catch(e){return}const r=await t.openFile(".ise_hashes.json.deflate",a.DefaultHash),i=await r.readHashes();let d=!1;const h={};await e.readDirRecursive(t.handle,(async(e,t)=>{try{if("file"===e.kind&&t.match(/\.(jpg|jpeg|png|gif|bmp|svg|webp|tiff|tif|ico|avif)$/i)){processing.textContent=t;const a=await e.getFile(),r=i[t];if(!r||r.lastModified!==a.lastModified){const e=await c.hash(a);i[t]={hash:e,lastModified:a.lastModified},d=!0}h[t]=!0}}catch(e){console.error("Failed to process image:",t),console.error("Error details:",e)}})),processing.textContent="",d&&await r.writeHashes(i);const u={},f=[];for(const e in i)if(h.hasOwnProperty(e)){const t=i[e],a=o(t.hash);t.path=e,u.hasOwnProperty(a)||(u[a]=[],f.push(t.hash)),u[a].push(t)}else delete i[e],d=!0;l.storageDir=t,l.hashRecords=i,l.hashRecordsByHash=u,l.hashRecordsTree=new n(f),imgPicker.removeAttribute("disabled")})),image.addEventListener("click",(()=>{image.src.endsWith("/#")||window.open(image.src,"_blank")})),imgPicker.addEventListener("change",(async e=>{d(e.target.files[0])})),window.addEventListener("paste",(e=>{if(!l.storageDir)return;const t=Array.from(e.clipboardData.items).find((e=>/^image\//.test(e.type))).getAsFile();imgPicker.value="",d(t)}))})();